// Generated by CoffeeScript 1.6.3
/*
# Plugin for the Americano web framework that takes care of your Model
# by providing helpers to build them (it wraps jugglingdb!). It requires you
# to write your requests in a single and clean file.
#
# This plugin has only sense for Cozy applications.
*/


(function() {
  var Schema, db, log, settings, _loadModels, _loadRequestCreators, _saveRequest, _saveRequests;

  log = require('printit')({
    date: true,
    prefix: 'americano-cozy'
  });

  _loadModels = function(root, requests) {
    var docRequests, docType, models;
    models = [];
    for (docType in requests) {
      docRequests = requests[docType];
      models[docType] = require("" + root + "/server/models/" + docType);
    }
    return models;
  };

  _saveRequest = function(models, request, callback) {
    var docRequest, docType, requestName;
    docType = request.docType;
    requestName = request.name;
    docRequest = request.docRequest;
    log.info("" + docType + " - " + requestName + " request creation...");
    return models[docType].defineRequest(requestName, docRequest, function(err) {
      if (err) {
        log.error("failed " + err);
      } else {
        log.info("succeeded");
      }
      return callback(err);
    });
  };

  _saveRequests = function(models, requestsToSave, callback) {
    var request;
    if (requestsToSave.length > 0) {
      request = requestsToSave.pop();
      return _saveRequest(models, request, function(err) {
        if (err) {
          return callback(err);
        } else {
          return _saveRequests(models, requestsToSave, callback);
        }
      });
    } else {
      return callback();
    }
  };

  _loadRequestCreators = function(root, models, requests) {
    var docRequest, docRequests, docType, requestName, requestsToSave;
    requestsToSave = [];
    for (docType in requests) {
      docRequests = requests[docType];
      for (requestName in docRequests) {
        docRequest = docRequests[requestName];
        requestsToSave.push({
          root: root,
          models: models,
          docType: docType,
          name: requestName,
          docRequest: docRequest
        });
      }
    }
    return requestsToSave;
  };

  module.exports.configure = function(root, app, callback) {
    var err, models, requests, requestsToSave;
    try {
      requests = require("" + root + "/server/models/requests");
    } catch (_error) {
      err = _error;
      log.error("failed to load requests file");
      callback(err);
    }
    models = _loadModels(root, requests);
    requestsToSave = _loadRequestCreators(root, models, requests);
    return _saveRequests(models, requestsToSave, function(err) {
      if (err && err.code !== 'EEXIST') {
        log.error("A request creation failed, abandon.");
        console.log(err);
        if (callback != null) {
          return callback(err);
        }
      } else {
        log.info("All requests have been created");
        if (callback != null) {
          return callback();
        }
      }
    });
  };

  Schema = require('jugglingdb').Schema;

  settings = {
    url: 'http://localhost:9101/'
  };

  module.exports.db = db = new Schema('cozy-adapter', settings);

  module.exports.getModel = function(name, fields) {
    var model;
    fields.id = String;
    model = db.define(name, fields);
    return model;
  };

  module.exports.defaultRequests = {
    all: function(doc) {
      return emit(doc._id, doc);
    }
  };

}).call(this);
