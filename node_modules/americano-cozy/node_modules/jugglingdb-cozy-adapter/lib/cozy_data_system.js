// Generated by CoffeeScript 1.6.3
(function() {
  var Client, fs, getClient;

  Client = require("request-json").JsonClient;

  fs = require('fs');

  exports.initialize = function(schema, callback) {
    this.schema = schema;
    if (schema.settings.url == null) {
      schema.settings.url = "http://localhost:9101/";
    }
    schema.adapter = new exports.CozyDataSystem(schema);
    return process.nextTick(callback);
  };

  exports.CozyDataSystem = (function() {
    function CozyDataSystem(schema) {
      this.schema = schema;
      this._models = {};
      this.client = new Client(schema.settings.url);
      if (process.env.NODE_ENV === "production" || process.env.NODE_ENV === "test") {
        this.username = process.env.NAME;
        this.password = process.env.TOKEN;
      } else {
        this.username = Math.random().toString(36);
        this.password = "token";
      }
    }

    CozyDataSystem.prototype.define = function(descr) {
      var _this = this;
      this._models[descr.model.modelName] = descr;
      if ((this.username != null) && (this.password != null)) {
        this.client.setBasicAuth(this.username, this.password);
      }
      descr.model.search = function(query, callback) {
        return _this.search(descr.model.modelName, query, callback);
      };
      descr.model.defineRequest = function(name, map, callback) {
        return _this.defineRequest(descr.model.modelName, name, map, callback);
      };
      descr.model.request = function(name, params, callback) {
        return _this.request(descr.model.modelName, name, params, callback);
      };
      descr.model.rawRequest = function(name, params, callback) {
        return _this.rawRequest(descr.model.modelName, name, params, callback);
      };
      descr.model.removeRequest = function(name, callback) {
        return _this.removeRequest(descr.model.modelName, name, callback);
      };
      descr.model.requestDestroy = function(name, params, callback) {
        return _this.requestDestroy(descr.model.modelName, name, params, callback);
      };
      descr.model.all = function(params, callback) {
        return _this.all(descr.model.modelName, params, callback);
      };
      descr.model.destroyAll = function(params, callback) {
        return _this.destroyAll(descr.model.modelName, params, callback);
      };
      descr.model.applyRequest = function(params, callback) {
        return _this.applyRequest(descr.model.modelName, params, callback);
      };
      descr.model._forDB = function(data) {
        return _this._forDB(descr.model.modelName, data);
      };
      descr.model.prototype.index = function(fields, callback) {
        return this._adapter().index(this, fields, callback);
      };
      descr.model.prototype.attachFile = function(path, data, callback) {
        return this._adapter().attachFile(this, path, data, callback);
      };
      descr.model.prototype.getFile = function(path, callback) {
        return this._adapter().getFile(this, path, callback);
      };
      descr.model.prototype.saveFile = function(path, filePath, callback) {
        return this._adapter().saveFile(this, path, filePath, callback);
      };
      descr.model.prototype.removeFile = function(path, callback) {
        return this._adapter().removeFile(this, path, callback);
      };
      descr.model.prototype.attachBinary = function(path, data, callback) {
        return this._adapter().attachBinary(this, path, data, callback);
      };
      descr.model.prototype.getBinary = function(path, callback) {
        return this._adapter().getBinary(this, path, callback);
      };
      descr.model.prototype.saveBinary = function(path, filePath, callback) {
        return this._adapter().saveBinary(this, path, filePath, callback);
      };
      return descr.model.prototype.removeBinary = function(path, callback) {
        return this._adapter().removeBinary(this, path, callback);
      };
    };

    CozyDataSystem.prototype.exists = function(model, id, callback) {
      var _this = this;
      return this.client.get("data/exist/" + id + "/", function(error, response, body) {
        if (error) {
          return callback(error);
        } else if ((body == null) || (body.exist == null)) {
          return callback(new Error("Data system returned invalid data."));
        } else {
          return callback(null, body.exist);
        }
      });
    };

    CozyDataSystem.prototype.find = function(model, id, callback) {
      var _this = this;
      return this.client.get("data/" + id + "/", function(error, response, body) {
        if (error) {
          return callback(error);
        } else if (response.statusCode === 404) {
          return callback(null, null);
        } else if (body.docType.toLowerCase() !== model.toLowerCase()) {
          return callback(null, null);
        } else {
          return callback(null, new _this._models[model].model(body));
        }
      });
    };

    CozyDataSystem.prototype.create = function(model, data, callback) {
      var path,
        _this = this;
      path = "data/";
      if (data.id != null) {
        path += "" + data.id + "/";
        delete data.id;
      }
      data.docType = model;
      return this.client.post(path, data, function(error, response, body) {
        if (error) {
          return callback(error);
        } else if (response.statusCode === 409) {
          return callback(new Error("This document already exists"));
        } else if (response.statusCode !== 201) {
          return callback(new Error("Server error occured."));
        } else {
          return callback(null, body._id);
        }
      });
    };

    CozyDataSystem.prototype.save = function(model, data, callback) {
      var _this = this;
      data.docType = model;
      return this.client.put("data/" + data.id + "/", data, function(error, response, body) {
        if (error) {
          return callback(error);
        } else if (response.statusCode === 404) {
          return callback(new Error("Document not found"));
        } else if (response.statusCode !== 200) {
          return callback(new Error("Server error occured."));
        } else {
          return callback();
        }
      });
    };

    CozyDataSystem.prototype.updateAttributes = function(model, id, data, callback) {
      var _this = this;
      return this.client.put("data/merge/" + id + "/", data, function(error, response, body) {
        if (error) {
          return callback(error);
        } else if (response.statusCode === 404) {
          return callback(new Error("Document not found"));
        } else if (response.statusCode !== 200) {
          return callback(new Error("Server error occured."));
        } else {
          return callback();
        }
      });
    };

    CozyDataSystem.prototype.updateOrCreate = function(model, data, callback) {
      var _this = this;
      data.docType = model;
      return this.client.put("data/upsert/" + data.id + "/", data, function(error, response, body) {
        if (error) {
          return callback(error);
        } else if (response.statusCode !== 200 && response.statusCode !== 201) {
          return callback(new Error("Server error occured."));
        } else if (response.statusCode === 200) {
          return callback(null);
        } else if (response.statusCode === 201) {
          return callback(null, body._id);
        }
      });
    };

    CozyDataSystem.prototype.destroy = function(model, id, callback) {
      var _this = this;
      return this.client.del("data/" + id + "/", function(error, response, body) {
        if (error) {
          return callback(error);
        } else if (response.statusCode === 404) {
          return callback(new Error("Document not found"));
        } else if (response.statusCode !== 204) {
          return callback(new Error("Server error occured."));
        } else {
          return callback();
        }
      });
    };

    CozyDataSystem.prototype.index = function(model, fields, callback) {
      var data,
        _this = this;
      data = {
        fields: fields
      };
      return this.client.post("data/index/" + model.id, data, (function(error, response, body) {
        if (error) {
          return callback(error);
        } else if (response.statusCode !== 200) {
          return callback(new Error(body));
        } else {
          return callback(null);
        }
      }), false);
    };

    CozyDataSystem.prototype.search = function(model, query, callback) {
      var data,
        _this = this;
      data = {
        query: query
      };
      return this.client.post("data/search/" + (model.toLowerCase()), data, function(error, response, body) {
        var doc, results, _i, _len, _ref;
        if (error) {
          return callback(error);
        } else if (response.statusCode !== 200) {
          return callback(new Error(body));
        } else {
          results = [];
          _ref = body.rows;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            doc = _ref[_i];
            results.push(new _this._models[model].model(doc));
            if (doc._id != null) {
              doc.id = doc._id;
            }
          }
          return callback(null, results);
        }
      });
    };

    CozyDataSystem.prototype.attachFile = function(model, path, data, callback) {
      var urlPath,
        _this = this;
      if (typeof data === "function") {
        callback = data;
        data = null;
      }
      urlPath = "data/" + model.id + "/attachments/";
      return this.client.sendFile(urlPath, path, data, function(error, response, body) {
        return _this.checkError(error, response, body, 201, callback);
      });
    };

    CozyDataSystem.prototype.getFile = function(model, path, callback) {
      var urlPath,
        _this = this;
      urlPath = "data/" + model.id + "/attachments/" + path;
      return this.client.get(urlPath, function(error, response, body) {
        return _this.checkError(error, response, body, 200, callback);
      }, false);
    };

    CozyDataSystem.prototype.saveFile = function(model, path, filePath, callback) {
      var urlPath,
        _this = this;
      urlPath = "data/" + model.id + "/attachments/" + path;
      return this.client.saveFile(urlPath, filePath, function(error, response, body) {
        return _this.checkError(error, response, body, 200, callback);
      });
    };

    CozyDataSystem.prototype.removeFile = function(model, path, callback) {
      var urlPath,
        _this = this;
      urlPath = "data/" + model.id + "/attachments/" + path;
      return this.client.del(urlPath, function(error, response, body) {
        return _this.checkError(error, response, body, 204, callback);
      });
    };

    CozyDataSystem.prototype.attachBinary = function(model, path, data, callback) {
      var urlPath,
        _this = this;
      if (typeof data === "function") {
        callback = data;
        data = null;
      }
      urlPath = "data/" + model.id + "/binaries/";
      return this.client.sendFile(urlPath, path, data, function(error, response, body) {
        return _this.checkError(error, response, body, 201, callback);
      });
    };

    CozyDataSystem.prototype.getBinary = function(model, path, callback) {
      var urlPath,
        _this = this;
      urlPath = "data/" + model.id + "/binaries/" + path;
      return this.client.get(urlPath, function(error, response, body) {
        return _this.checkError(error, response, body, 200, callback);
      }, false);
    };

    CozyDataSystem.prototype.saveBinary = function(model, path, filePath, callback) {
      var urlPath,
        _this = this;
      urlPath = "data/" + model.id + "/binaries/" + path;
      return this.client.saveFile(urlPath, filePath, function(error, response, body) {
        return _this.checkError(error, response, body, 200, callback);
      });
    };

    CozyDataSystem.prototype.removeBinary = function(model, path, callback) {
      var urlPath,
        _this = this;
      urlPath = "data/" + model.id + "/binaries/" + path;
      return this.client.del(urlPath, function(error, response, body) {
        return _this.checkError(error, response, body, 204, callback);
      });
    };

    CozyDataSystem.prototype.checkError = function(error, response, body, code, callback) {
      var msg, msgStatus;
      if (error) {
        return callback(error);
      } else if (response.statusCode !== code) {
        msgStatus = "expected: " + code + ", got: " + response.statusCode;
        msg = "" + msgStatus + " -- " + body.error;
        return callback(new Error(msg));
      } else {
        return callback(null);
      }
    };

    CozyDataSystem.prototype.defineRequest = function(model, name, request, callback) {
      var map, path, reduce, view,
        _this = this;
      if (typeof request === "function") {
        map = request;
      } else {
        map = request.map;
        reduce = request.reduce.toString();
      }
      view = {
        reduce: reduce,
        map: "function (doc) {\n  if (doc.docType.toLowerCase() === \"" + (model.toLowerCase()) + "\") {\n    filter = " + (map.toString()) + ";\n    filter(doc);\n  }\n}"
      };
      path = "request/" + (model.toLowerCase()) + "/" + (name.toLowerCase()) + "/";
      return this.client.put(path, view, function(error, response, body) {
        return _this.checkError(error, response, body, 200, callback);
      });
    };

    CozyDataSystem.prototype.request = function(model, name, params, callback) {
      var path,
        _this = this;
      if (typeof params === "function") {
        callback = params;
      }
      path = "request/" + (model.toLowerCase()) + "/" + (name.toLowerCase()) + "/";
      return this.client.post(path, params, function(error, response, body) {
        var doc, results, _i, _len;
        if (error) {
          return callback(error);
        } else if (response.statusCode !== 200) {
          return callback(new Error(body));
        } else {
          results = [];
          for (_i = 0, _len = body.length; _i < _len; _i++) {
            doc = body[_i];
            doc.value.id = doc.value._id;
            results.push(new _this._models[model].model(doc.value));
          }
          return callback(null, results);
        }
      });
    };

    CozyDataSystem.prototype.rawRequest = function(model, name, params, callback) {
      var path,
        _this = this;
      if (typeof params === "function") {
        callback = params;
      }
      path = "request/" + (model.toLowerCase()) + "/" + (name.toLowerCase()) + "/";
      return this.client.post(path, params, function(error, response, body) {
        if (error) {
          return callback(error);
        } else if (response.statusCode !== 200) {
          return callback(new Error(body));
        } else {
          return callback(null, body);
        }
      });
    };

    CozyDataSystem.prototype.removeRequest = function(model, name, callback) {
      var path,
        _this = this;
      path = "request/" + (model.toLowerCase()) + "/" + (name.toLowerCase()) + "/";
      return this.client.del(path, function(error, response, body) {
        return _this.checkError(error, response, body, 204, callback);
      });
    };

    CozyDataSystem.prototype.requestDestroy = function(model, name, params, callback) {
      var path,
        _this = this;
      if (typeof params === "function") {
        callback = params;
      }
      path = "request/" + (model.toLowerCase()) + "/" + (name.toLowerCase()) + "/destroy/";
      return this.client.put(path, params, function(error, response, body) {
        return _this.checkError(error, response, body, 204, callback);
      });
    };

    CozyDataSystem.prototype.all = function(model, params, callback) {
      var view;
      view = "all";
      if ((params != null ? params.view : void 0) != null) {
        view = params.view;
        delete params.view;
      }
      return this.request(model, view, params, callback);
    };

    CozyDataSystem.prototype.destroyAll = function(model, params, callback) {
      var view;
      view = "all";
      if ((params != null ? params.view : void 0) != null) {
        view = params.view;
        delete params.view;
      }
      return this.requestDestroy(model, view, params, callback);
    };

    CozyDataSystem.prototype._forDB = function(model, data) {
      var res,
        _this = this;
      res = {};
      Object.keys(data).forEach(function(propName) {
        if (_this.whatTypeName(model, propName) === 'JSON') {
          return res[propName] = JSON.stringify(data[propName]);
        } else {
          return res[propName] = data[propName];
        }
      });
      return res;
    };

    CozyDataSystem.prototype.whatTypeName = function(model, propName) {
      var ds;
      ds = this.schema.definitions[model];
      return ds.properties[propName] && ds.properties[propName].type.name;
    };

    return CozyDataSystem;

  })();

  getClient = function(callback) {
    var client;
    client = new Client("http://localhost:9101/");
    if (process.env.NODE_ENV === "production" || process.env.NODE_ENV === "test") {
      this.username = process.env.NAME;
      this.password = process.env.TOKEN;
    } else {
      this.username = Math.random().toString(36);
      this.password = "token";
    }
    client.setBasicAuth(this.username, this.password);
    return callback(client);
  };

  exports.sendMail = function(data, callback) {
    var _this = this;
    return getClient(function(client) {
      var path;
      path = "mail/";
      return client.post(path, data, function(error, response, body) {
        if (body.error) {
          return callback(body.error);
        } else if (response.statusCode === 400) {
          return callback(new Error('Body has not all necessary attributes'));
        } else if (response.statusCode === 500) {
          return callback(new Error("Server error occured."));
        } else {
          return callback();
        }
      });
    });
  };

  exports.sendMailToUser = function(data, callback) {
    var _this = this;
    return getClient(function(client) {
      var path;
      path = "mail/to-user/";
      return client.post(path, data, function(error, response, body) {
        if (body.error) {
          return callback(body.error);
        } else if (response.statusCode === 400) {
          return callback(new Error('Body has not all necessary attributes'));
        } else if (response.statusCode === 500) {
          return callback(new Error("Server error occured."));
        } else {
          return callback();
        }
      });
    });
  };

  exports.sendMailFromUser = function(data, callback) {
    var _this = this;
    return getClient(function(client) {
      var path;
      path = "mail/from-user/";
      return client.post(path, data, function(error, response, body) {
        if (body.error != null) {
          return callback(body.error);
        } else if (response.statusCode === 400) {
          return callback(new Error('Body has not all necessary attributes'));
        } else if (response.statusCode === 500) {
          return callback(new Error("Server error occured."));
        } else {
          return callback();
        }
      });
    });
  };

  exports.commonRequests = {
    checkError: function(err) {
      if (err) {
        return console.log("An error occured while creating request");
      }
    },
    all: function() {
      return emit(doc._id, doc);
    },
    allType: function() {
      return emit(doc.type, doc);
    },
    allSlug: function() {
      return emit(doc.slug, doc);
    }
  };

}).call(this);
