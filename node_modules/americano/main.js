// Generated by CoffeeScript 1.7.1

/*
 * Unique file describing all the configuration steps done by americano.
 */

(function() {
  var americano, config, express, fs, log, root,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  express = require('express');

  fs = require('fs');

  log = require('printit')({
    date: true,
    prefix: 'americano'
  });

  module.exports = americano = express;

  root = process.cwd();

  config = {
    common: [
      americano.bodyParser(), americano.json(), americano.urlencoded(), americano.methodOverride(), americano.errorHandler({
        dumpExceptions: true,
        showStack: true
      }), americano["static"](__dirname + '/../../client/public', {
        maxAge: 86400000
      })
    ],
    development: [americano.logger('dev')],
    production: [americano.logger('short')]
  };

  americano._configure = function(app) {
    var env, err, middlewares, _results;
    try {
      config = require("" + root + "/server/config");
    } catch (_error) {
      err = _error;
      console.log(err);
      log.warn("Can't load config file, use default one instead");
    }
    _results = [];
    for (env in config) {
      middlewares = config[env];
      _results.push(americano._configureEnv(app, env, middlewares));
    }
    return _results;
  };

  americano._configureEnv = function(app, env, middlewares) {
    var applyMiddlewares;
    applyMiddlewares = function() {
      var element, elements, key, method, middleware, value, _i, _len, _results, _results1;
      if (middlewares instanceof Array) {
        _results = [];
        for (_i = 0, _len = middlewares.length; _i < _len; _i++) {
          middleware = middlewares[_i];
          _results.push(app.use(middleware));
        }
        return _results;
      } else {
        _results1 = [];
        for (method in middlewares) {
          elements = middlewares[method];
          if (method === 'beforeStart' || method === 'afterStart') {
            _results1.push(app[method] = elements);
          } else if (method === 'use') {
            _results1.push((function() {
              var _j, _len1, _results2;
              _results2 = [];
              for (_j = 0, _len1 = elements.length; _j < _len1; _j++) {
                element = elements[_j];
                _results2.push(app[method](element));
              }
              return _results2;
            })());
          } else {
            _results1.push((function() {
              var _results2;
              _results2 = [];
              for (key in elements) {
                value = elements[key];
                app[method].apply(app, [key, value]);
                _results2.push(app.get(key));
              }
              return _results2;
            })());
          }
        }
        return _results1;
      }
    };
    if (env === 'common' || env === app.get('env')) {
      return applyMiddlewares();
    }
  };

  americano._loadRoutes = function(app) {
    var controller, controllers, err, path, routes, verb;
    try {
      routes = require("" + root + "/server/controllers/routes");
    } catch (_error) {
      err = _error;
      console.log(err);
      log.warn("Route configuration file is missing, make " + "sure routes.(coffee|js) is located at the root of" + " the controlllers folder.");
      log.warn("No routes loaded");
    }
    for (path in routes) {
      controllers = routes[path];
      for (verb in controllers) {
        controller = controllers[verb];
        americano._loadRoute(app, path, verb, controller);
      }
    }
    return log.info("Routes loaded.");
  };

  americano._loadRoute = function(app, path, verb, controller) {
    var err;
    try {
      if (verb === "param") {
        return app.param(path, controller);
      } else {
        if (controller instanceof Array) {
          return app[verb].apply(app, ["/" + path].concat(controller));
        } else {
          return app[verb]("/" + path, controller);
        }
      }
    } catch (_error) {
      err = _error;
      log.error("Can't load controller for " + ("route " + verb + " " + path + " " + action));
      console.log(err);
      return process.exit(1);
    }
  };

  americano._loadPlugin = function(app, plugin, callback) {
    var err, pluginPath;
    log.info("add plugin: " + plugin);
    if (plugin.indexOf('/') === -1) {
      pluginPath = plugin;
    } else {
      pluginPath = require('path').join(root, plugin);
    }
    try {
      plugin = require(pluginPath);
      __extends(americano, plugin);
      return americano.configure(root, app, callback);
    } catch (_error) {
      err = _error;
      return callback(err);
    }
  };

  americano._loadPlugins = function(app, callback) {
    var pluginList, _loadPluginList;
    pluginList = config.plugins;
    _loadPluginList = function(list) {
      var plugin;
      if (list.length > 0) {
        plugin = list.pop();
        return americano._loadPlugin(app, plugin, function(err) {
          if (err) {
            log.error("" + plugin + " failed to load.");
            console.log(err);
          } else {
            log.info("" + plugin + " loaded.");
          }
          return _loadPluginList(list);
        });
      } else {
        return callback();
      }
    };
    if ((pluginList != null ? pluginList.length : void 0) > 0) {
      return _loadPluginList(pluginList);
    } else {
      return callback();
    }
  };

  americano._new = function(callback) {
    var app;
    app = americano();
    americano._configure(app);
    return americano._loadPlugins(app, function() {
      americano._loadRoutes(app);
      return callback(app);
    });
  };

  americano.start = function(options, callback) {
    var host, name, port;
    if (process.env.NODE_ENV == null) {
      process.env.NODE_ENV = 'development';
    }
    port = options.port || 3000;
    host = options.host || "127.0.0.1";
    if (options.root != null) {
      root = options.root;
    }
    name = options.name || "Americano";
    return americano._new(function(app) {
      var server;
      if (app.beforeStart != null) {
        app.beforeStart();
      }
      return server = app.listen(port, host, function() {
        if (app.afterStart != null) {
          app.afterStart(app, server);
        }
        log.info("Configuration for " + process.env.NODE_ENV + " loaded.");
        log.info(("" + name + " server is listening on ") + ("port " + port + "..."));
        if (callback != null) {
          return callback(app, server);
        }
      });
    });
  };

}).call(this);
